package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.CompareEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SwapEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CopyEvent;


/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> bubbleSort(T[] arr) {
        List<SortEvent<Integer>> events = new ArrayList<>();
        int unsortedSize = arr.length - 1;
        while(unsortedSize > 0){
            int maxIndex = unsortedSize;
            for(int i = 0; i <= unsortedSize; i++){
                if(arr[i].compareTo(arr[maxIndex]) > 0){
                    // Add event
                    events.add(new CompareEvent<Integer>(i, maxIndex));
                    maxIndex = i;
                }
            }
            swap(arr, unsortedSize, maxIndex);
            // Add event
            events.add(new SwapEvent<Integer>(unsortedSize, maxIndex));
            unsortedSize--;
        }
        return events;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> selectionSort(T[] arr) {
        List<SortEvent<Integer>> events = new ArrayList<>();
        int sortedSize = 0;
        while(sortedSize < arr.length){
            int minIndex = sortedSize;
            for(int i = sortedSize; i < arr.length; i++){
                if(arr[i].compareTo(arr[minIndex]) < 0){
                    // Add event
                    events.add(new CompareEvent<Integer>(i, minIndex));
                    minIndex = i;
                }
            }
            swap(arr, sortedSize, minIndex);
            // Add event
            events.add(new SwapEvent<Integer>(sortedSize, minIndex));
            sortedSize++;
        }
        return events;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ] 
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> insertionSort(T[] arr) {
        List<SortEvent<Integer>> events = new ArrayList<>();
        for(int i = 0; i < arr.length; i++){
            for(int j = 0; j < i; j++){
                if(arr[i].compareTo(arr[j]) <= 0){
                    // Add event
                    events.add(new CompareEvent<Integer>(i, j));
                    for(int k = i; k > j; k--){ 
                        // swap until the element is in its right place (i.e insertion)
                        swap(arr, k, k-1);
                        // Add event
                        events.add(new SwapEvent<Integer>(k, k-1));
                    }
                    break;
                }
            }
        }
        return events;
    }


      public static <T extends Comparable<? super T>> void mergeSortHelper(T[] arr, int startIndex, int endIndex, 
                                                                            List<SortEvent<Integer>> events) {
        if((endIndex - startIndex) > 1){
            int midIndex = (endIndex - startIndex) / 2 + startIndex;
            T[] result = Arrays.copyOf(arr, arr.length);
            mergeSortHelper(arr, startIndex, midIndex, events);
            mergeSortHelper(arr, midIndex, endIndex, events);

            int i = startIndex;
            int j = midIndex;
            int index = startIndex;
            while(index < endIndex){
                if(arr[i].compareTo(arr[j]) <= 0){
                    // Add event
                    events.add(new CompareEvent<Integer>(i, j));
                    result[index] = arr[i];
                    // Add event
                    events.add(new CopyEvent<Integer>(index, i));
                    i++;
                }else{
                    result[index] = arr[j];
                    // Add event
                    events.add(new CopyEvent<Integer>(index, j));
                    j++;
                }
                index++;
            }
            arr = result;
        }
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> mergeSort(T[] arr) {
        List<SortEvent<Integer>> events = new ArrayList<>();
        mergeSortHelper(arr, 0, arr.length, events);
        return events;
    }

    public static <T extends Comparable<? super T>> void quickSorthelper(T[] arr, int startIndex, int endIndex, 
                                                                        List<SortEvent<Integer>> events){
        
        if(endIndex - startIndex > 1){
            int midIndex = (endIndex - startIndex) / 2 + startIndex;
            T pivot = arr[midIndex];
            System.out.println(arr[midIndex]);
            boolean passedPivot = false;
            int remaining = 0;
            int newPivotIndex = midIndex;
            for(int i = startIndex; i < endIndex; i++){
                System.out.println(i);
                if(arr[i].compareTo(pivot) > 0 && i < newPivotIndex){

                    for(int j = i; j < newPivotIndex; j++){
                        swap(arr, j, j+1);
                        // Add event
                        events.add(new SwapEvent<Integer>(j, j+1));
                    }
                    newPivotIndex--;
                    if(!passedPivot){
                        i--;
                        remaining--;
                    }

                    
                }else if(arr[i].compareTo(pivot) < 0 && i > newPivotIndex){
                    for(int j = i; j > newPivotIndex; j--){
                        swap(arr, j, j-1);
                        events.add(new SwapEvent<Integer>(j, j-1));
                    }
                    newPivotIndex++;
                }else {
                    passedPivot = true;
                    remaining = endIndex - i;
                    newPivotIndex = i;
                }
            }
        }
        
    }

    /**
     * Sorts the array according to the quick sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> quickSort(T[] arr) {
        List<SortEvent<Integer>> events = new ArrayList<>();
        quickSorthelper(arr, 0, arr.length, events);
        return events;
    }


    /**
     * Sorts the array according to the gnome sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> gnomeSort(T[] arr) {
        List<SortEvent<Integer>> events = new ArrayList<>();
        int currentIndex = 1;
        while (currentIndex < arr.length) {
            if (arr[currentIndex-1].compareTo(arr[currentIndex]) > 0) {
                // Add event
                events.add(new CompareEvent<>(currentIndex-1, currentIndex));

                swap(arr, currentIndex-1, currentIndex);
                // Add event
                events.add(new SwapEvent<>(currentIndex, currentIndex-1));

                currentIndex--;
                if (currentIndex == 0) {
                    currentIndex = 1;
                }
            } else {
                currentIndex++;
            }
        }
        return events;
    }

    /**
     * Given an array of Ts and list of SortEvent<T> objects, apply those events to the list in-order.
     * @param <T> the carrier type of the array
     * @param l the array to apply events to
     * @param events the SortEvent list
     */
    public static <T> void eventSort(T[] l, List<SortEvent<T>> events){
        for (int i=0; i< l.length; i++) {
            events.get(i).apply(l);
        }
    }
}